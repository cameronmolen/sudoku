import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import java.awt.*;
import java.text.ParseException;

public class SudokuGui extends JFrame {
  private final SudokuBoard board;
  private final SudokuController controller;

  /** Constructor for SudokuGui class. */
  public SudokuGui(SudokuBoard sudokuBoard) {
    board = sudokuBoard;
    controller = new SudokuController(sudokuBoard);
    setTitle("Sudoku");
    JPanel panel = new JPanel(new GridBagLayout());
    panel.add(createGrid(), getConstraints());
    getContentPane().add(panel, BorderLayout.CENTER);
    setMinimumSize(new Dimension(550,550));
    pack();
    setDefaultCloseOperation(EXIT_ON_CLOSE);
  }

  /** Sets the listener for the SudokuController. */
  public void setListener(SudokuListener listener) {
    controller.setListener(listener);
  }

  /**
   * Generates the entire sudoku grid to be displayed in the GUI.
   * @return a JPanel of the sudoku grid
   */
  private JPanel createGrid() {
    JPanel grid = createMatrices(2);
    for(int row = 0; row < board.getBoxDimensions(); row++) {
      for(int col = 0; col < board.getBoxDimensions(); col++) {
        JPanel matrix = createMatrices(1);
        populateMatrix(matrix, row, col);
        grid.add(matrix);
      }
    }
    grid.setBorder(new EmptyBorder(new Insets(6,6,6,6)));
    return grid;
  }

  /**
   * Creates a JPanel matrix that contains a GridLayout with the specified dimensions for each matrix in the SudokuBoard.
   * @param distanceBetween the spacing between each element in the grid
   * @return the JPanel matrix
   */
  private JPanel createMatrices(int distanceBetween) {
    GridLayout gridLayout = new GridLayout(board.getBoxDimensions(), board.getBoxDimensions(), 1, 1);
    gridLayout.setHgap(distanceBetween);
    gridLayout.setVgap(distanceBetween);
    return new JPanel(gridLayout);
  }

  /**
   * Populates each field in a matrix with generated values from the SudokuBoard class.
   * @param matrix a JPanel matrix to be populated with digits
   * @param row the row that the matrix is in on the board
   * @param col the column that the matrix is in on the board
   */
  private void populateMatrix(JPanel matrix, int row, int col) {
    for(int boxRow = 0; boxRow < board.getBoxDimensions(); boxRow++) {
      for(int boxCol = 0; boxCol < board.getBoxDimensions(); boxCol++) {
        JFormattedTextField field;
        int rowCoord = (row * board.getBoxDimensions()) + boxRow;
        int colCoord = (col * board.getBoxDimensions()) + boxCol;
        if(board.getBoard()[rowCoord][colCoord] != 0) {
          field = createLockedNumberField(String.valueOf(board.getBoard()[rowCoord][colCoord]));
        } else {
          field = createEditableNumberField();
        }
        controller.bindCell(rowCoord, colCoord, field);
        matrix.add(field);
      }
    }
  }

  /**
   * Creates an editable field that the user can input a single digit into.
   * @return the editable field
   */
  private JFormattedTextField createEditableNumberField() {
    JFormattedTextField field = new JFormattedTextField();
    field.setPreferredSize(new Dimension(15,15));
    field.setHorizontalAlignment(JTextField.CENTER);
    field.setText("");
    field.setBorder(null);
    field.setInputVerifier(new InputVerifier() {
      public boolean verify(JComponent input) {
        return field.getText().isEmpty() || (field.getText().length() <= 1 && (Character.isDigit(field.getText().charAt(0)) || Character.isSpaceChar(field.getText().charAt(0))));
      }
    });
    return field;
  }

  /**
   * Creates a locked field that the displays the locked digits generated by SudokuBoard.
   * @return the locked field
   */
  private JFormattedTextField createLockedNumberField(String value) {
    JFormattedTextField field = new JFormattedTextField();
    field.setPreferredSize(new Dimension(15,15));
    field.setEditable(false);
    field.setHorizontalAlignment(JTextField.CENTER);
    field.setText(value);
    field.setBorder(null);
    return field;
  }

  /**
   * Generates new GridBagConstraints and returns them.
   * @return the GridBagConstraints
   */
  private GridBagConstraints getConstraints() {
    GridBagConstraints constraints = new GridBagConstraints();
    constraints.fill = GridBagConstraints.BOTH;
    constraints.weightx = 1.0;
    constraints.weighty = 1.0;
    return constraints;
  }

}